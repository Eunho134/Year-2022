# 1. version
kubectl version --short

# 2. Show usefull object list
kubectl api-resources

# 3. Create resource for yaml file
kubectl apply -f [yaml file]

# 4. Exist object list 
kubectl get pods
NAME    READY   STATUS  RESTARTS    AGE

-o wide        : 추가 정보
--show-labels  : label 정보

# 5. Show Describe object info
kubectl describe pods [pod name]
Name, Nmaespace, Priority, Node, Start Time, Labels, Annotations, Status, IP ...

# 6. Connect Pod
kubectl exec -it [pod name] bash

# 7. Connect Container
kubectl exec -it [pod name] -c [container name] bash

# 8. Check pod log
kubectl logs [pod name]

# 9. Delete object
kubectl delete -f [yaml file]

# Delete --all
kubectl delete deployment,pod,rs --all

# Resource edit 
# object type = pods
kubectl edit pods [pod name]

# Setting deployment 
# --record : 변경사항 기록
kubectl apply -f [deployment yaml file] --record

# Show rollout pods info 
kubectl rollout history deployment [pod name]
REVISION    CHANGE-CAUSE

# Rollback
kubectl rollout undo deployment [pod name] --to-revision=1

# Change Pods Scale
kubectl scale --replicas=1 deployment [pod name]

# Create configmap
# --from-literal 해당 설정 값 설정
kubectl create configmap start-k8s --from-literal k8s=kubernetes --from-literal container=docker

# Show configmap on yaml type
kubectl get configmap [configmap name] -o yaml

# Create configmap from file_name
# key   : --from-file key=[file name]
# env   : --from-env-file [env file name]
kubectl create configmap index-file --from-file "index.html"

# Deployment without configmap : --dry-run
# 실행 가능여부만 체크 : kuebectl apply, create 
kubectl create configmap my-configmap --from-literal mykey="key name" --dry-run -o yaml > "yaml file name"
