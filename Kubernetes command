 Get
# namespace 조회
$ kubectl get ns or namespace
default     : 다른 namespace가 없는 오브젝트를 위한 기본 네임스페이스
kube-system : kubernetes 시스템에서 생성한 오브젝트를 위한 네임스페이스
kube-public : 모든 사용자가 읽기 권한으로 접근할 수 있으며, 
              이 네임스페이스는 주로 클러스터 중에 공개적으로 확인되어 읽을 수 있는 리소스를 위해 예약 되어 있음

# api resource 조회
$ kubectl apt-resource

# namespace의 resource조회
$ kubectl get all -o wide -n default

# default namespace의 pod조회 
$ kubectl get pods

# 모든 namespace의 pod조회
$ kubectl get pods --all-namespaces

# pod 정보 자세히 보기 
$ kubectl get pod -o wide

# pod watch mode로 보기 
$ kubectl get pod -w

# default namespace의 deployment조회
$ kubectl get deploy

# 모든 namespace의 모든 deployment조회
$ kubectl get deploy --all-namespaces

# default namespace의 service조회
$ kubectl get service
$ kubectl get svc

# 모든 namespace의 모든 service조회
$ kubectl get service --all-namespaces
$ kubectl get svc --all-namespaces

#node 조회
$ kubectl get node
♬ Create
# namespace 생성
$ kubectl create ns namespace_name

# test.yaml파일 작성 후 create하면 yaml파일의 내용이 생성
$ kubectl create -f test.yaml 

# yaml파일의 문법이 맞는지 확인하기 
$ kubectl create -f test.yaml --dry-run=client

# 명령어로 create 후 yaml 파일로 만들기
$ kubectl create deploy test-deploy --image=nginx --dry-run=client -o yaml > nginx.yaml
♬ Delete
#test.yaml 파일로 생성된 내용 삭제
$ kubectl delete -f test.yaml

# 모든 자원 삭제 
$ kubectl delete all --all

# 원하는 파드만 삭제 
$ kubectl get pod
$ kubectl delete {pod이름}
♬ Describe
# node 정보
$ kubectl get nodes
$ kubectl describe nodes {node이름}

# pod 정보
$ kubectl get pods
$ kubectl describe pod {pod이름}
♬ Exec
# Pod에 bash로 들어가기
$ kubectl get pods
$ kubectl exec -it {pod이름} /bin/bash

# 특정 Pod에서 curl 실행하기
$ kubectl get pods
$ kubectl exec {pod이름} -- curl localhost:8080
♬ Log
# 특정 pod의 로그 확인
$ kubectl get pods
$ kubectl logs {pod이름}

# 특정 pod의 로그 tail 
$ kubectl get pods
$ kubectl logs -f {pod이름}